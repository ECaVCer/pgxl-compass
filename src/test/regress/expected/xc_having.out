-- this file contains tests for HAVING clause with combinations of following
-- 1. enable_hashagg = on/off (to force the grouping by sorting)
-- 2. distributed or replicated tables across the datanodes
-- If a testcase is added to any of the combinations, please check if it's
-- applicable in other combinations as well.
-- Since we are testing, the plan reduction of GROUP and AGG nodes, we should
-- disable fast query shipping
set enable_fast_query_shipping to off;
ERROR:  unrecognized configuration parameter "enable_fast_query_shipping"
-- Combination 1: enable_hashagg on and distributed tables
set enable_hashagg to on;
-- create required tables and fill them with data
create table xc_having_tab1 (val int, val2 int);
create table xc_having_tab2 (val int, val2 int);
insert into xc_having_tab1 values (1, 1), (2, 1), (3, 1), (2, 2), (6, 2), (4, 3), (1, 3), (6, 3);
insert into xc_having_tab2 values (1, 1), (4, 1), (8, 1), (2, 4), (9, 4), (3, 4), (4, 2), (5, 2), (3, 2);
-- having clause not containing any aggregate
select count(*), sum(val), avg(val), sum(val)::float8/count(*), val2 from xc_having_tab1 group by val2 having val2 + 1 > 3;
 count | sum |        avg         |     ?column?     | val2 
-------+-----+--------------------+------------------+------
     3 |  11 | 3.6666666666666667 | 3.66666666666667 |    3
(1 row)

explain (verbose true, costs false, nodes false) select count(*), sum(val), avg(val), sum(val)::float8/count(*), val2 from xc_having_tab1 group by val2 having val2 + 1 > 3;
                                                                                       QUERY PLAN                                                                                        
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 HashAggregate
   Output: pg_catalog.count(*), pg_catalog.sum((sum(val))), pg_catalog.avg((avg(val))), ((pg_catalog.sum((sum(val))))::double precision / (pg_catalog.count(*))::double precision), val2
   Group Key: xc_having_tab1.val2
   ->  Remote Subquery Scan on all
         Output: count(*), sum(val), avg(val), val2
         ->  HashAggregate
               Output: count(*), sum(val), avg(val), val2
               Group Key: xc_having_tab1.val2
               ->  Seq Scan on public.xc_having_tab1
                     Output: val, val2
                     Filter: ((xc_having_tab1.val2 + 1) > 3)
(11 rows)

-- having clause containing aggregate
select count(*), sum(val), avg(val), sum(val)::float8/count(*), val2 from xc_having_tab1 group by val2 having avg(val) > 3.75;
 count | sum |        avg         | ?column? | val2 
-------+-----+--------------------+----------+------
     2 |   8 | 4.0000000000000000 |        4 |    2
(1 row)

explain (verbose true, costs false, nodes false) select count(*), sum(val), avg(val), sum(val)::float8/count(*), val2 from xc_having_tab1 group by val2 having avg(val) > 3.75;
                                                                                       QUERY PLAN                                                                                        
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 HashAggregate
   Output: pg_catalog.count(*), pg_catalog.sum((sum(val))), pg_catalog.avg((avg(val))), ((pg_catalog.sum((sum(val))))::double precision / (pg_catalog.count(*))::double precision), val2
   Group Key: xc_having_tab1.val2
   Filter: (pg_catalog.avg((avg(xc_having_tab1.val))) > 3.75)
   ->  Remote Subquery Scan on all
         Output: count(*), sum(val), avg(val), val2
         ->  HashAggregate
               Output: count(*), sum(val), avg(val), val2
               Group Key: xc_having_tab1.val2
               ->  Seq Scan on public.xc_having_tab1
                     Output: val, val2
(11 rows)

select count(*), sum(val), avg(val), sum(val)::float8/count(*), val2 from xc_having_tab1 group by val2 having avg(val) > 3.75 or val2 > 2;
 count | sum |        avg         |     ?column?     | val2 
-------+-----+--------------------+------------------+------
     3 |  11 | 3.6666666666666667 | 3.66666666666667 |    3
     2 |   8 | 4.0000000000000000 |                4 |    2
(2 rows)

explain (verbose true, costs false, nodes false) select count(*), sum(val), avg(val), sum(val)::float8/count(*), val2 from xc_having_tab1 group by val2 having avg(val) > 3.75 or val2 > 2;
                                                                                       QUERY PLAN                                                                                        
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 HashAggregate
   Output: pg_catalog.count(*), pg_catalog.sum((sum(val))), pg_catalog.avg((avg(val))), ((pg_catalog.sum((sum(val))))::double precision / (pg_catalog.count(*))::double precision), val2
   Group Key: xc_having_tab1.val2
   Filter: ((pg_catalog.avg((avg(xc_having_tab1.val))) > 3.75) OR (xc_having_tab1.val2 > 2))
   ->  Remote Subquery Scan on all
         Output: count(*), sum(val), avg(val), val2, val2
         ->  HashAggregate
               Output: count(*), sum(val), avg(val), val2, val2
               Group Key: xc_having_tab1.val2
               ->  Seq Scan on public.xc_having_tab1
                     Output: val, val2
(11 rows)

select count(*), sum(val), avg(val), sum(val)::float8/count(*), val2 from xc_having_tab1 group by val2 having avg(val) > 3.75 and val2 > 2;
 count | sum | avg | ?column? | val2 
-------+-----+-----+----------+------
(0 rows)

explain (verbose true, costs false, nodes false) select count(*), sum(val), avg(val), sum(val)::float8/count(*), val2 from xc_having_tab1 group by val2 having avg(val) > 3.75 and val2 > 2;
                                                                                       QUERY PLAN                                                                                        
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 HashAggregate
   Output: pg_catalog.count(*), pg_catalog.sum((sum(val))), pg_catalog.avg((avg(val))), ((pg_catalog.sum((sum(val))))::double precision / (pg_catalog.count(*))::double precision), val2
   Group Key: xc_having_tab1.val2
   Filter: (pg_catalog.avg((avg(xc_having_tab1.val))) > 3.75)
   ->  Remote Subquery Scan on all
         Output: count(*), sum(val), avg(val), val2
         ->  HashAggregate
               Output: count(*), sum(val), avg(val), val2
               Group Key: xc_having_tab1.val2
               ->  Seq Scan on public.xc_having_tab1
                     Output: val, val2
                     Filter: (xc_having_tab1.val2 > 2)
(12 rows)

-- joins and group by and having
select count(*), sum(xc_having_tab1.val * xc_having_tab2.val), avg(xc_having_tab1.val*xc_having_tab2.val), sum(xc_having_tab1.val*xc_having_tab2.val)::float8/count(*), xc_having_tab1.val2, xc_having_tab2.val2 from xc_having_tab1 full outer join xc_having_tab2 on xc_having_tab1.val2 = xc_having_tab2.val2 group by xc_having_tab1.val2, xc_having_tab2.val2 having xc_having_tab1.val2 + xc_having_tab2.val2 > 2;
 count | sum |         avg         | ?column? | val2 | val2 
-------+-----+---------------------+----------+------+------
     6 |  96 | 16.0000000000000000 |       16 |    2 |    2
(1 row)

explain (verbose true, costs false, nodes false) select count(*), sum(xc_having_tab1.val * xc_having_tab2.val), avg(xc_having_tab1.val*xc_having_tab2.val), sum(xc_having_tab1.val*xc_having_tab2.val)::float8/count(*), xc_having_tab1.val2, xc_having_tab2.val2 from xc_having_tab1 full outer join xc_having_tab2 on xc_having_tab1.val2 = xc_having_tab2.val2 group by xc_having_tab1.val2, xc_having_tab2.val2 having xc_having_tab1.val2 + xc_having_tab2.val2 > 2;
                                                                                                                               QUERY PLAN                                                                                                                                
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Remote Subquery Scan on all
   Output: count(*), sum((xc_having_tab1.val * xc_having_tab2.val)), avg((xc_having_tab1.val * xc_having_tab2.val)), ((sum((xc_having_tab1.val * xc_having_tab2.val)))::double precision / (count(*))::double precision), xc_having_tab1.val2, xc_having_tab2.val2
   ->  GroupAggregate
         Output: count(*), sum((xc_having_tab1.val * xc_having_tab2.val)), avg((xc_having_tab1.val * xc_having_tab2.val)), ((sum((xc_having_tab1.val * xc_having_tab2.val)))::double precision / (count(*))::double precision), xc_having_tab1.val2, xc_having_tab2.val2
         Group Key: xc_having_tab1.val2, xc_having_tab2.val2
         ->  Merge Join
               Output: xc_having_tab1.val2, xc_having_tab1.val, xc_having_tab2.val2, xc_having_tab2.val
               Merge Cond: (xc_having_tab1.val2 = xc_having_tab2.val2)
               Join Filter: ((xc_having_tab1.val2 + xc_having_tab2.val2) > 2)
               ->  Remote Subquery Scan on all
                     Output: xc_having_tab1.val2, xc_having_tab1.val
                     Distribute results by H: val2
                     ->  Sort
                           Output: xc_having_tab1.val2, xc_having_tab1.val
                           Sort Key: xc_having_tab1.val2
                           ->  Seq Scan on public.xc_having_tab1
                                 Output: xc_having_tab1.val2, xc_having_tab1.val
               ->  Materialize
                     Output: xc_having_tab2.val2, xc_having_tab2.val
                     ->  Remote Subquery Scan on all
                           Output: xc_having_tab2.val2, xc_having_tab2.val
                           Distribute results by H: val2
                           ->  Sort
                                 Output: xc_having_tab2.val2, xc_having_tab2.val
                                 Sort Key: xc_having_tab2.val2
                                 ->  Seq Scan on public.xc_having_tab2
                                       Output: xc_having_tab2.val2, xc_having_tab2.val
(27 rows)

-- group by and having, without aggregate in the target list
select val2 from xc_having_tab1 group by val2 having sum(val) > 8;
 val2 
------
    3
(1 row)

explain (verbose true, costs false, nodes false) select val2 from xc_having_tab1 group by val2 having sum(val) > 8;
                        QUERY PLAN                         
-----------------------------------------------------------
 HashAggregate
   Output: val2
   Group Key: xc_having_tab1.val2
   Filter: (pg_catalog.sum((sum(xc_having_tab1.val))) > 8)
   ->  Remote Subquery Scan on all
         Output: val2, sum(val)
         ->  HashAggregate
               Output: val2, sum(val)
               Group Key: xc_having_tab1.val2
               ->  Seq Scan on public.xc_having_tab1
                     Output: val, val2
(11 rows)

select * from (select val + val2 sum from xc_having_tab1 group by val + val2 having sum(val) > 5) q order by q.sum;
 sum 
-----
   4
   8
   9
(3 rows)

explain (verbose true, costs false, nodes false) select * from (select val + val2 sum from xc_having_tab1 group by val + val2 having sum(val) > 5) q order by q.sum;
                                            QUERY PLAN                                             
---------------------------------------------------------------------------------------------------
 Sort
   Output: ((xc_having_tab1.val + xc_having_tab1.val2))
   Sort Key: ((xc_having_tab1.val + xc_having_tab1.val2))
   ->  HashAggregate
         Output: ((xc_having_tab1.val + xc_having_tab1.val2))
         Group Key: (xc_having_tab1.val + xc_having_tab1.val2)
         Filter: (pg_catalog.sum((sum(xc_having_tab1.val))) > 5)
         ->  Remote Subquery Scan on all
               Output: (xc_having_tab1.val + xc_having_tab1.val2), sum(xc_having_tab1.val)
               ->  HashAggregate
                     Output: ((xc_having_tab1.val + xc_having_tab1.val2)), sum(xc_having_tab1.val)
                     Group Key: (xc_having_tab1.val + xc_having_tab1.val2)
                     ->  Seq Scan on public.xc_having_tab1
                           Output: (xc_having_tab1.val + xc_having_tab1.val2), xc_having_tab1.val
(14 rows)

-- group by with aggregates in expression
select count(*) + sum(val) + avg(val), val2 from xc_having_tab1 group by val2 having min(val) < val2;
      ?column?       | val2 
---------------------+------
 17.6666666666666667 |    3
(1 row)

explain (verbose true, costs false, nodes false) select count(*) + sum(val) + avg(val), val2 from xc_having_tab1 group by val2 having min(val) < val2;
                                                  QUERY PLAN                                                  
--------------------------------------------------------------------------------------------------------------
 HashAggregate
   Output: (((pg_catalog.count(*) + pg_catalog.sum((sum(val)))))::numeric + pg_catalog.avg((avg(val)))), val2
   Group Key: xc_having_tab1.val2
   Filter: (min((min(xc_having_tab1.val))) < xc_having_tab1.val2)
   ->  Remote Subquery Scan on all
         Output: count(*), sum(val), avg(val), val2, min(val), val2
         ->  HashAggregate
               Output: count(*), sum(val), avg(val), val2, min(val), val2
               Group Key: xc_having_tab1.val2
               ->  Seq Scan on public.xc_having_tab1
                     Output: val, val2
(11 rows)

drop table xc_having_tab1;
drop table xc_having_tab2;
-- Combination 2, enable_hashagg on and replicated tables.
-- repeat the same tests for replicated tables
-- create required tables and fill them with data
create table xc_having_tab1 (val int, val2 int) distribute by replication;
create table xc_having_tab2 (val int, val2 int) distribute by replication;
insert into xc_having_tab1 values (1, 1), (2, 1), (3, 1), (2, 2), (6, 2), (4, 3), (1, 3), (6, 3);
insert into xc_having_tab2 values (1, 1), (4, 1), (8, 1), (2, 4), (9, 4), (3, 4), (4, 2), (5, 2), (3, 2);
-- having clause not containing any aggregate
select count(*), sum(val), avg(val), sum(val)::float8/count(*), val2 from xc_having_tab1 group by val2 having val2 + 1 > 3;
 count | sum |        avg         |     ?column?     | val2 
-------+-----+--------------------+------------------+------
     3 |  11 | 3.6666666666666667 | 3.66666666666667 |    3
(1 row)

explain (verbose true, costs false, nodes false) select count(*), sum(val), avg(val), sum(val)::float8/count(*), val2 from xc_having_tab1 group by val2 having val2 + 1 > 3;
                                                                                                QUERY PLAN                                                                                                 
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Remote Fast Query Execution
   Output: count(*), sum(xc_having_tab1.val), avg(xc_having_tab1.val), ((sum(xc_having_tab1.val))::double precision / (count(*))::double precision), xc_having_tab1.val2
   Remote query: SELECT count(*) AS count, sum(val) AS sum, avg(val) AS avg, ((sum(val))::double precision / (count(*))::double precision), val2 FROM xc_having_tab1 GROUP BY val2 HAVING ((val2 + 1) > 3)
   ->  HashAggregate
         Output: count(*), sum(val), avg(val), ((sum(val))::double precision / (count(*))::double precision), val2
         Group Key: xc_having_tab1.val2
         ->  Seq Scan on public.xc_having_tab1
               Output: val, val2
               Filter: ((xc_having_tab1.val2 + 1) > 3)
(9 rows)

-- having clause containing aggregate
select count(*), sum(val), avg(val), sum(val)::float8/count(*), val2 from xc_having_tab1 group by val2 having avg(val) > 3.75;
 count | sum |        avg         | ?column? | val2 
-------+-----+--------------------+----------+------
     2 |   8 | 4.0000000000000000 |        4 |    2
(1 row)

explain (verbose true, costs false, nodes false) select count(*), sum(val), avg(val), sum(val)::float8/count(*), val2 from xc_having_tab1 group by val2 having avg(val) > 3.75;
                                                                                                 QUERY PLAN                                                                                                 
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Remote Fast Query Execution
   Output: count(*), sum(xc_having_tab1.val), avg(xc_having_tab1.val), ((sum(xc_having_tab1.val))::double precision / (count(*))::double precision), xc_having_tab1.val2
   Remote query: SELECT count(*) AS count, sum(val) AS sum, avg(val) AS avg, ((sum(val))::double precision / (count(*))::double precision), val2 FROM xc_having_tab1 GROUP BY val2 HAVING (avg(val) > 3.75)
   ->  HashAggregate
         Output: count(*), sum(val), avg(val), ((sum(val))::double precision / (count(*))::double precision), val2
         Group Key: xc_having_tab1.val2
         Filter: (avg(xc_having_tab1.val) > 3.75)
         ->  Seq Scan on public.xc_having_tab1
               Output: val, val2
(9 rows)

select count(*), sum(val), avg(val), sum(val)::float8/count(*), val2 from xc_having_tab1 group by val2 having avg(val) > 3.75 or val2 > 2;
 count | sum |        avg         |     ?column?     | val2 
-------+-----+--------------------+------------------+------
     3 |  11 | 3.6666666666666667 | 3.66666666666667 |    3
     2 |   8 | 4.0000000000000000 |                4 |    2
(2 rows)

explain (verbose true, costs false, nodes false) select count(*), sum(val), avg(val), sum(val)::float8/count(*), val2 from xc_having_tab1 group by val2 having avg(val) > 3.75 or val2 > 2;
                                                                                                         QUERY PLAN                                                                                                         
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Remote Fast Query Execution
   Output: count(*), sum(xc_having_tab1.val), avg(xc_having_tab1.val), ((sum(xc_having_tab1.val))::double precision / (count(*))::double precision), xc_having_tab1.val2
   Remote query: SELECT count(*) AS count, sum(val) AS sum, avg(val) AS avg, ((sum(val))::double precision / (count(*))::double precision), val2 FROM xc_having_tab1 GROUP BY val2 HAVING ((avg(val) > 3.75) OR (val2 > 2))
   ->  HashAggregate
         Output: count(*), sum(val), avg(val), ((sum(val))::double precision / (count(*))::double precision), val2
         Group Key: xc_having_tab1.val2
         Filter: ((avg(xc_having_tab1.val) > 3.75) OR (xc_having_tab1.val2 > 2))
         ->  Seq Scan on public.xc_having_tab1
               Output: val, val2
(9 rows)

select count(*), sum(val), avg(val), sum(val)::float8/count(*), val2 from xc_having_tab1 group by val2 having avg(val) > 3.75 and val2 > 2;
 count | sum | avg | ?column? | val2 
-------+-----+-----+----------+------
(0 rows)

explain (verbose true, costs false, nodes false) select count(*), sum(val), avg(val), sum(val)::float8/count(*), val2 from xc_having_tab1 group by val2 having avg(val) > 3.75 and val2 > 2;
                                                                                                         QUERY PLAN                                                                                                          
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Remote Fast Query Execution
   Output: count(*), sum(xc_having_tab1.val), avg(xc_having_tab1.val), ((sum(xc_having_tab1.val))::double precision / (count(*))::double precision), xc_having_tab1.val2
   Remote query: SELECT count(*) AS count, sum(val) AS sum, avg(val) AS avg, ((sum(val))::double precision / (count(*))::double precision), val2 FROM xc_having_tab1 GROUP BY val2 HAVING ((avg(val) > 3.75) AND (val2 > 2))
   ->  HashAggregate
         Output: count(*), sum(val), avg(val), ((sum(val))::double precision / (count(*))::double precision), val2
         Group Key: xc_having_tab1.val2
         Filter: (avg(xc_having_tab1.val) > 3.75)
         ->  Seq Scan on public.xc_having_tab1
               Output: val, val2
               Filter: (xc_having_tab1.val2 > 2)
(10 rows)

-- joins and group by and having
select count(*), sum(xc_having_tab1.val * xc_having_tab2.val), avg(xc_having_tab1.val*xc_having_tab2.val), sum(xc_having_tab1.val*xc_having_tab2.val)::float8/count(*), xc_having_tab1.val2, xc_having_tab2.val2 from xc_having_tab1 full outer join xc_having_tab2 on xc_having_tab1.val2 = xc_having_tab2.val2 group by xc_having_tab1.val2, xc_having_tab2.val2 having xc_having_tab1.val2 + xc_having_tab2.val2 > 2;
 count | sum |         avg         | ?column? | val2 | val2 
-------+-----+---------------------+----------+------+------
     6 |  96 | 16.0000000000000000 |       16 |    2 |    2
(1 row)

explain (verbose true, costs false, nodes false) select count(*), sum(xc_having_tab1.val * xc_having_tab2.val), avg(xc_having_tab1.val*xc_having_tab2.val), sum(xc_having_tab1.val*xc_having_tab2.val)::float8/count(*), xc_having_tab1.val2, xc_having_tab2.val2 from xc_having_tab1 full outer join xc_having_tab2 on xc_having_tab1.val2 = xc_having_tab2.val2 group by xc_having_tab1.val2, xc_having_tab2.val2 having xc_having_tab1.val2 + xc_having_tab2.val2 > 2;
                                                                                                                               QUERY PLAN                                                                                                                                
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Remote Subquery Scan on all
   Output: count(*), sum((xc_having_tab1.val * xc_having_tab2.val)), avg((xc_having_tab1.val * xc_having_tab2.val)), ((sum((xc_having_tab1.val * xc_having_tab2.val)))::double precision / (count(*))::double precision), xc_having_tab1.val2, xc_having_tab2.val2
   ->  GroupAggregate
         Output: count(*), sum((xc_having_tab1.val * xc_having_tab2.val)), avg((xc_having_tab1.val * xc_having_tab2.val)), ((sum((xc_having_tab1.val * xc_having_tab2.val)))::double precision / (count(*))::double precision), xc_having_tab1.val2, xc_having_tab2.val2
         Group Key: xc_having_tab1.val2, xc_having_tab2.val2
         ->  Merge Join
               Output: xc_having_tab1.val2, xc_having_tab1.val, xc_having_tab2.val2, xc_having_tab2.val
               Merge Cond: (xc_having_tab1.val2 = xc_having_tab2.val2)
               Join Filter: ((xc_having_tab1.val2 + xc_having_tab2.val2) > 2)
               ->  Sort
                     Output: xc_having_tab1.val2, xc_having_tab1.val
                     Sort Key: xc_having_tab1.val2
                     ->  Seq Scan on public.xc_having_tab1
                           Output: xc_having_tab1.val2, xc_having_tab1.val
               ->  Sort
                     Output: xc_having_tab2.val2, xc_having_tab2.val
                     Sort Key: xc_having_tab2.val2
                     ->  Seq Scan on public.xc_having_tab2
                           Output: xc_having_tab2.val2, xc_having_tab2.val
(19 rows)

-- group by and having, without aggregate in the target list
select val2 from xc_having_tab1 group by val2 having sum(val) > 8;
 val2 
------
    3
(1 row)

explain (verbose true, costs false, nodes false) select val2 from xc_having_tab1 group by val2 having sum(val) > 8;
                                     QUERY PLAN                                      
-------------------------------------------------------------------------------------
 Remote Fast Query Execution
   Output: xc_having_tab1.val2
   Remote query: SELECT val2 FROM xc_having_tab1 GROUP BY val2 HAVING (sum(val) > 8)
   ->  HashAggregate
         Output: val2
         Group Key: xc_having_tab1.val2
         Filter: (sum(xc_having_tab1.val) > 8)
         ->  Seq Scan on public.xc_having_tab1
               Output: val, val2
(9 rows)

select * from (select val + val2 sum from xc_having_tab1 group by val + val2 having sum(val) > 5) q order by q.sum;
 sum 
-----
   4
   8
   9
(3 rows)

explain (verbose true, costs false, nodes false) select * from (select val + val2 sum from xc_having_tab1 group by val + val2 having sum(val) > 5) q order by q.sum;
                                         QUERY PLAN                                         
--------------------------------------------------------------------------------------------
 Remote Subquery Scan on all
   Output: sum
   ->  Sort
         Output: ((xc_having_tab1.val + xc_having_tab1.val2))
         Sort Key: ((xc_having_tab1.val + xc_having_tab1.val2))
         ->  HashAggregate
               Output: ((xc_having_tab1.val + xc_having_tab1.val2))
               Group Key: (xc_having_tab1.val + xc_having_tab1.val2)
               Filter: (sum(xc_having_tab1.val) > 5)
               ->  Seq Scan on public.xc_having_tab1
                     Output: (xc_having_tab1.val + xc_having_tab1.val2), xc_having_tab1.val
(11 rows)

-- group by with aggregates in expression
select count(*) + sum(val) + avg(val), val2 from xc_having_tab1 group by val2 having min(val) < val2;
      ?column?       | val2 
---------------------+------
 17.6666666666666667 |    3
(1 row)

explain (verbose true, costs false, nodes false) select count(*) + sum(val) + avg(val), val2 from xc_having_tab1 group by val2 having min(val) < val2;
                                                              QUERY PLAN                                                               
---------------------------------------------------------------------------------------------------------------------------------------
 Remote Fast Query Execution
   Output: (((count(*) + sum(xc_having_tab1.val)))::numeric + avg(xc_having_tab1.val)), xc_having_tab1.val2
   Remote query: SELECT (((count(*) + sum(val)))::numeric + avg(val)), val2 FROM xc_having_tab1 GROUP BY val2 HAVING (min(val) < val2)
   ->  HashAggregate
         Output: (((count(*) + sum(val)))::numeric + avg(val)), val2
         Group Key: xc_having_tab1.val2
         Filter: (min(xc_having_tab1.val) < xc_having_tab1.val2)
         ->  Seq Scan on public.xc_having_tab1
               Output: val, val2
(9 rows)

drop table xc_having_tab1;
drop table xc_having_tab2;
-- Combination 3 enable_hashagg off and distributed tables
set enable_hashagg to off;
-- create required tables and fill them with data
create table xc_having_tab1 (val int, val2 int);
create table xc_having_tab2 (val int, val2 int);
insert into xc_having_tab1 values (1, 1), (2, 1), (3, 1), (2, 2), (6, 2), (4, 3), (1, 3), (6, 3);
insert into xc_having_tab2 values (1, 1), (4, 1), (8, 1), (2, 4), (9, 4), (3, 4), (4, 2), (5, 2), (3, 2);
-- having clause not containing any aggregate
select count(*), sum(val), avg(val), sum(val)::float8/count(*), val2 from xc_having_tab1 group by val2 having val2 + 1 > 3;
 count | sum |        avg         |     ?column?     | val2 
-------+-----+--------------------+------------------+------
     3 |  11 | 3.6666666666666667 | 3.66666666666667 |    3
(1 row)

explain (verbose true, costs false, nodes false) select count(*), sum(val), avg(val), sum(val)::float8/count(*), val2 from xc_having_tab1 group by val2 having val2 + 1 > 3;
                                                                                       QUERY PLAN                                                                                        
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 GroupAggregate
   Output: pg_catalog.count(*), pg_catalog.sum((sum(val))), pg_catalog.avg((avg(val))), ((pg_catalog.sum((sum(val))))::double precision / (pg_catalog.count(*))::double precision), val2
   Group Key: xc_having_tab1.val2
   ->  Remote Subquery Scan on all
         Output: count(*), sum(val), avg(val), val2
         ->  GroupAggregate
               Output: count(*), sum(val), avg(val), val2
               Group Key: xc_having_tab1.val2
               ->  Sort
                     Output: val2, val
                     Sort Key: xc_having_tab1.val2
                     ->  Seq Scan on public.xc_having_tab1
                           Output: val2, val
                           Filter: ((xc_having_tab1.val2 + 1) > 3)
(14 rows)

-- having clause containing aggregate
select count(*), sum(val), avg(val), sum(val)::float8/count(*), val2 from xc_having_tab1 group by val2 having avg(val) > 3.75;
 count | sum |        avg         | ?column? | val2 
-------+-----+--------------------+----------+------
     2 |   8 | 4.0000000000000000 |        4 |    2
(1 row)

explain (verbose true, costs false, nodes false) select count(*), sum(val), avg(val), sum(val)::float8/count(*), val2 from xc_having_tab1 group by val2 having avg(val) > 3.75;
                                                                                       QUERY PLAN                                                                                        
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 GroupAggregate
   Output: pg_catalog.count(*), pg_catalog.sum((sum(val))), pg_catalog.avg((avg(val))), ((pg_catalog.sum((sum(val))))::double precision / (pg_catalog.count(*))::double precision), val2
   Group Key: xc_having_tab1.val2
   Filter: (pg_catalog.avg((avg(xc_having_tab1.val))) > 3.75)
   ->  Remote Subquery Scan on all
         Output: count(*), sum(val), avg(val), val2
         ->  GroupAggregate
               Output: count(*), sum(val), avg(val), val2
               Group Key: xc_having_tab1.val2
               ->  Sort
                     Output: val2, val
                     Sort Key: xc_having_tab1.val2
                     ->  Seq Scan on public.xc_having_tab1
                           Output: val2, val
(14 rows)

select count(*), sum(val), avg(val), sum(val)::float8/count(*), val2 from xc_having_tab1 group by val2 having avg(val) > 3.75 or val2 > 2;
 count | sum |        avg         |     ?column?     | val2 
-------+-----+--------------------+------------------+------
     2 |   8 | 4.0000000000000000 |                4 |    2
     3 |  11 | 3.6666666666666667 | 3.66666666666667 |    3
(2 rows)

explain (verbose true, costs false, nodes false) select count(*), sum(val), avg(val), sum(val)::float8/count(*), val2 from xc_having_tab1 group by val2 having avg(val) > 3.75 or val2 > 2;
                                                                                       QUERY PLAN                                                                                        
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 GroupAggregate
   Output: pg_catalog.count(*), pg_catalog.sum((sum(val))), pg_catalog.avg((avg(val))), ((pg_catalog.sum((sum(val))))::double precision / (pg_catalog.count(*))::double precision), val2
   Group Key: xc_having_tab1.val2
   Filter: ((pg_catalog.avg((avg(xc_having_tab1.val))) > 3.75) OR (xc_having_tab1.val2 > 2))
   ->  Remote Subquery Scan on all
         Output: count(*), sum(val), avg(val), val2, val2
         ->  GroupAggregate
               Output: count(*), sum(val), avg(val), val2, val2
               Group Key: xc_having_tab1.val2
               ->  Sort
                     Output: val2, val
                     Sort Key: xc_having_tab1.val2
                     ->  Seq Scan on public.xc_having_tab1
                           Output: val2, val
(14 rows)

select count(*), sum(val), avg(val), sum(val)::float8/count(*), val2 from xc_having_tab1 group by val2 having avg(val) > 3.75 and val2 > 2;
 count | sum | avg | ?column? | val2 
-------+-----+-----+----------+------
(0 rows)

explain (verbose true, costs false, nodes false) select count(*), sum(val), avg(val), sum(val)::float8/count(*), val2 from xc_having_tab1 group by val2 having avg(val) > 3.75 and val2 > 2;
                                                                                       QUERY PLAN                                                                                        
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 GroupAggregate
   Output: pg_catalog.count(*), pg_catalog.sum((sum(val))), pg_catalog.avg((avg(val))), ((pg_catalog.sum((sum(val))))::double precision / (pg_catalog.count(*))::double precision), val2
   Group Key: xc_having_tab1.val2
   Filter: (pg_catalog.avg((avg(xc_having_tab1.val))) > 3.75)
   ->  Remote Subquery Scan on all
         Output: count(*), sum(val), avg(val), val2
         ->  GroupAggregate
               Output: count(*), sum(val), avg(val), val2
               Group Key: xc_having_tab1.val2
               ->  Sort
                     Output: val2, val
                     Sort Key: xc_having_tab1.val2
                     ->  Seq Scan on public.xc_having_tab1
                           Output: val2, val
                           Filter: (xc_having_tab1.val2 > 2)
(15 rows)

-- joins and group by and having
select count(*), sum(xc_having_tab1.val * xc_having_tab2.val), avg(xc_having_tab1.val*xc_having_tab2.val), sum(xc_having_tab1.val*xc_having_tab2.val)::float8/count(*), xc_having_tab1.val2, xc_having_tab2.val2 from xc_having_tab1 full outer join xc_having_tab2 on xc_having_tab1.val2 = xc_having_tab2.val2 group by xc_having_tab1.val2, xc_having_tab2.val2 having xc_having_tab1.val2 + xc_having_tab2.val2 > 2;
 count | sum |         avg         | ?column? | val2 | val2 
-------+-----+---------------------+----------+------+------
     6 |  96 | 16.0000000000000000 |       16 |    2 |    2
(1 row)

explain (verbose true, costs false, nodes false) select count(*), sum(xc_having_tab1.val * xc_having_tab2.val), avg(xc_having_tab1.val*xc_having_tab2.val), sum(xc_having_tab1.val*xc_having_tab2.val)::float8/count(*), xc_having_tab1.val2, xc_having_tab2.val2 from xc_having_tab1 full outer join xc_having_tab2 on xc_having_tab1.val2 = xc_having_tab2.val2 group by xc_having_tab1.val2, xc_having_tab2.val2 having xc_having_tab1.val2 + xc_having_tab2.val2 > 2;
                                                                                                                               QUERY PLAN                                                                                                                                
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Remote Subquery Scan on all
   Output: count(*), sum((xc_having_tab1.val * xc_having_tab2.val)), avg((xc_having_tab1.val * xc_having_tab2.val)), ((sum((xc_having_tab1.val * xc_having_tab2.val)))::double precision / (count(*))::double precision), xc_having_tab1.val2, xc_having_tab2.val2
   ->  GroupAggregate
         Output: count(*), sum((xc_having_tab1.val * xc_having_tab2.val)), avg((xc_having_tab1.val * xc_having_tab2.val)), ((sum((xc_having_tab1.val * xc_having_tab2.val)))::double precision / (count(*))::double precision), xc_having_tab1.val2, xc_having_tab2.val2
         Group Key: xc_having_tab1.val2, xc_having_tab2.val2
         ->  Merge Join
               Output: xc_having_tab1.val2, xc_having_tab1.val, xc_having_tab2.val2, xc_having_tab2.val
               Merge Cond: (xc_having_tab1.val2 = xc_having_tab2.val2)
               Join Filter: ((xc_having_tab1.val2 + xc_having_tab2.val2) > 2)
               ->  Remote Subquery Scan on all
                     Output: xc_having_tab1.val2, xc_having_tab1.val
                     Distribute results by H: val2
                     ->  Sort
                           Output: xc_having_tab1.val2, xc_having_tab1.val
                           Sort Key: xc_having_tab1.val2
                           ->  Seq Scan on public.xc_having_tab1
                                 Output: xc_having_tab1.val2, xc_having_tab1.val
               ->  Materialize
                     Output: xc_having_tab2.val2, xc_having_tab2.val
                     ->  Remote Subquery Scan on all
                           Output: xc_having_tab2.val2, xc_having_tab2.val
                           Distribute results by H: val2
                           ->  Sort
                                 Output: xc_having_tab2.val2, xc_having_tab2.val
                                 Sort Key: xc_having_tab2.val2
                                 ->  Seq Scan on public.xc_having_tab2
                                       Output: xc_having_tab2.val2, xc_having_tab2.val
(27 rows)

-- group by and having, without aggregate in the target list
select val2 from xc_having_tab1 group by val2 having sum(val) > 8;
 val2 
------
    3
(1 row)

explain (verbose true, costs false, nodes false) select val2 from xc_having_tab1 group by val2 having sum(val) > 8;
                        QUERY PLAN                         
-----------------------------------------------------------
 GroupAggregate
   Output: val2
   Group Key: xc_having_tab1.val2
   Filter: (pg_catalog.sum((sum(xc_having_tab1.val))) > 8)
   ->  Remote Subquery Scan on all
         Output: val2, sum(val)
         ->  GroupAggregate
               Output: val2, sum(val)
               Group Key: xc_having_tab1.val2
               ->  Sort
                     Output: val2, val
                     Sort Key: xc_having_tab1.val2
                     ->  Seq Scan on public.xc_having_tab1
                           Output: val2, val
(14 rows)

select val + val2 from xc_having_tab1 group by val + val2 having sum(val) > 5;
 ?column? 
----------
        4
        8
        9
(3 rows)

explain (verbose true, costs false, nodes false) select val + val2 from xc_having_tab1 group by val + val2 having sum(val) > 5;
                                 QUERY PLAN                                 
----------------------------------------------------------------------------
 GroupAggregate
   Output: ((val + val2))
   Group Key: (xc_having_tab1.val + xc_having_tab1.val2)
   Filter: (pg_catalog.sum((sum(xc_having_tab1.val))) > 5)
   ->  Remote Subquery Scan on all
         Output: (val + val2), sum(val)
         ->  GroupAggregate
               Output: ((val + val2)), sum(val)
               Group Key: ((xc_having_tab1.val + xc_having_tab1.val2))
               ->  Sort
                     Output: ((val + val2)), val
                     Sort Key: ((xc_having_tab1.val + xc_having_tab1.val2))
                     ->  Seq Scan on public.xc_having_tab1
                           Output: (val + val2), val
(14 rows)

-- group by with aggregates in expression
select count(*) + sum(val) + avg(val), val2 from xc_having_tab1 group by val2 having min(val) < val2;
      ?column?       | val2 
---------------------+------
 17.6666666666666667 |    3
(1 row)

explain (verbose true, costs false, nodes false) select count(*) + sum(val) + avg(val), val2 from xc_having_tab1 group by val2 having min(val) < val2;
                                                  QUERY PLAN                                                  
--------------------------------------------------------------------------------------------------------------
 GroupAggregate
   Output: (((pg_catalog.count(*) + pg_catalog.sum((sum(val)))))::numeric + pg_catalog.avg((avg(val)))), val2
   Group Key: xc_having_tab1.val2
   Filter: (min((min(xc_having_tab1.val))) < xc_having_tab1.val2)
   ->  Remote Subquery Scan on all
         Output: count(*), sum(val), avg(val), val2, min(val), val2
         ->  GroupAggregate
               Output: count(*), sum(val), avg(val), val2, min(val), val2
               Group Key: xc_having_tab1.val2
               ->  Sort
                     Output: val2, val
                     Sort Key: xc_having_tab1.val2
                     ->  Seq Scan on public.xc_having_tab1
                           Output: val2, val
(14 rows)

drop table xc_having_tab1;
drop table xc_having_tab2;
-- Combination 4 enable_hashagg off and replicated tables.
-- repeat the same tests for replicated tables
-- create required tables and fill them with data
create table xc_having_tab1 (val int, val2 int) distribute by replication;
create table xc_having_tab2 (val int, val2 int) distribute by replication;
insert into xc_having_tab1 values (1, 1), (2, 1), (3, 1), (2, 2), (6, 2), (4, 3), (1, 3), (6, 3);
insert into xc_having_tab2 values (1, 1), (4, 1), (8, 1), (2, 4), (9, 4), (3, 4), (4, 2), (5, 2), (3, 2);
-- having clause not containing any aggregate
select count(*), sum(val), avg(val), sum(val)::float8/count(*), val2 from xc_having_tab1 group by val2 having val2 + 1 > 3;
 count | sum |        avg         |     ?column?     | val2 
-------+-----+--------------------+------------------+------
     3 |  11 | 3.6666666666666667 | 3.66666666666667 |    3
(1 row)

explain (verbose true, costs false, nodes false) select count(*), sum(val), avg(val), sum(val)::float8/count(*), val2 from xc_having_tab1 group by val2 having val2 + 1 > 3;
                                                                                                QUERY PLAN                                                                                                 
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Remote Fast Query Execution
   Output: count(*), sum(xc_having_tab1.val), avg(xc_having_tab1.val), ((sum(xc_having_tab1.val))::double precision / (count(*))::double precision), xc_having_tab1.val2
   Remote query: SELECT count(*) AS count, sum(val) AS sum, avg(val) AS avg, ((sum(val))::double precision / (count(*))::double precision), val2 FROM xc_having_tab1 GROUP BY val2 HAVING ((val2 + 1) > 3)
   ->  GroupAggregate
         Output: count(*), sum(val), avg(val), ((sum(val))::double precision / (count(*))::double precision), val2
         Group Key: xc_having_tab1.val2
         ->  Sort
               Output: val2, val
               Sort Key: xc_having_tab1.val2
               ->  Seq Scan on public.xc_having_tab1
                     Output: val2, val
                     Filter: ((xc_having_tab1.val2 + 1) > 3)
(12 rows)

-- having clause containing aggregate
select count(*), sum(val), avg(val), sum(val)::float8/count(*), val2 from xc_having_tab1 group by val2 having avg(val) > 3.75;
 count | sum |        avg         | ?column? | val2 
-------+-----+--------------------+----------+------
     2 |   8 | 4.0000000000000000 |        4 |    2
(1 row)

explain (verbose true, costs false, nodes false) select count(*), sum(val), avg(val), sum(val)::float8/count(*), val2 from xc_having_tab1 group by val2 having avg(val) > 3.75;
                                                                                                 QUERY PLAN                                                                                                 
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Remote Fast Query Execution
   Output: count(*), sum(xc_having_tab1.val), avg(xc_having_tab1.val), ((sum(xc_having_tab1.val))::double precision / (count(*))::double precision), xc_having_tab1.val2
   Remote query: SELECT count(*) AS count, sum(val) AS sum, avg(val) AS avg, ((sum(val))::double precision / (count(*))::double precision), val2 FROM xc_having_tab1 GROUP BY val2 HAVING (avg(val) > 3.75)
   ->  GroupAggregate
         Output: count(*), sum(val), avg(val), ((sum(val))::double precision / (count(*))::double precision), val2
         Group Key: xc_having_tab1.val2
         Filter: (avg(xc_having_tab1.val) > 3.75)
         ->  Sort
               Output: val2, val
               Sort Key: xc_having_tab1.val2
               ->  Seq Scan on public.xc_having_tab1
                     Output: val2, val
(12 rows)

select count(*), sum(val), avg(val), sum(val)::float8/count(*), val2 from xc_having_tab1 group by val2 having avg(val) > 3.75 or val2 > 2;
 count | sum |        avg         |     ?column?     | val2 
-------+-----+--------------------+------------------+------
     2 |   8 | 4.0000000000000000 |                4 |    2
     3 |  11 | 3.6666666666666667 | 3.66666666666667 |    3
(2 rows)

explain (verbose true, costs false, nodes false) select count(*), sum(val), avg(val), sum(val)::float8/count(*), val2 from xc_having_tab1 group by val2 having avg(val) > 3.75 or val2 > 2;
                                                                                                         QUERY PLAN                                                                                                         
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Remote Fast Query Execution
   Output: count(*), sum(xc_having_tab1.val), avg(xc_having_tab1.val), ((sum(xc_having_tab1.val))::double precision / (count(*))::double precision), xc_having_tab1.val2
   Remote query: SELECT count(*) AS count, sum(val) AS sum, avg(val) AS avg, ((sum(val))::double precision / (count(*))::double precision), val2 FROM xc_having_tab1 GROUP BY val2 HAVING ((avg(val) > 3.75) OR (val2 > 2))
   ->  GroupAggregate
         Output: count(*), sum(val), avg(val), ((sum(val))::double precision / (count(*))::double precision), val2
         Group Key: xc_having_tab1.val2
         Filter: ((avg(xc_having_tab1.val) > 3.75) OR (xc_having_tab1.val2 > 2))
         ->  Sort
               Output: val2, val
               Sort Key: xc_having_tab1.val2
               ->  Seq Scan on public.xc_having_tab1
                     Output: val2, val
(12 rows)

select count(*), sum(val), avg(val), sum(val)::float8/count(*), val2 from xc_having_tab1 group by val2 having avg(val) > 3.75 and val2 > 2;
 count | sum | avg | ?column? | val2 
-------+-----+-----+----------+------
(0 rows)

explain (verbose true, costs false, nodes false) select count(*), sum(val), avg(val), sum(val)::float8/count(*), val2 from xc_having_tab1 group by val2 having avg(val) > 3.75 and val2 > 2;
                                                                                                         QUERY PLAN                                                                                                          
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Remote Fast Query Execution
   Output: count(*), sum(xc_having_tab1.val), avg(xc_having_tab1.val), ((sum(xc_having_tab1.val))::double precision / (count(*))::double precision), xc_having_tab1.val2
   Remote query: SELECT count(*) AS count, sum(val) AS sum, avg(val) AS avg, ((sum(val))::double precision / (count(*))::double precision), val2 FROM xc_having_tab1 GROUP BY val2 HAVING ((avg(val) > 3.75) AND (val2 > 2))
   ->  GroupAggregate
         Output: count(*), sum(val), avg(val), ((sum(val))::double precision / (count(*))::double precision), val2
         Group Key: xc_having_tab1.val2
         Filter: (avg(xc_having_tab1.val) > 3.75)
         ->  Sort
               Output: val2, val
               Sort Key: xc_having_tab1.val2
               ->  Seq Scan on public.xc_having_tab1
                     Output: val2, val
                     Filter: (xc_having_tab1.val2 > 2)
(13 rows)

-- joins and group by and having
select count(*), sum(xc_having_tab1.val * xc_having_tab2.val), avg(xc_having_tab1.val*xc_having_tab2.val), sum(xc_having_tab1.val*xc_having_tab2.val)::float8/count(*), xc_having_tab1.val2, xc_having_tab2.val2 from xc_having_tab1 full outer join xc_having_tab2 on xc_having_tab1.val2 = xc_having_tab2.val2 group by xc_having_tab1.val2, xc_having_tab2.val2 having xc_having_tab1.val2 + xc_having_tab2.val2 > 2;
 count | sum |         avg         | ?column? | val2 | val2 
-------+-----+---------------------+----------+------+------
     6 |  96 | 16.0000000000000000 |       16 |    2 |    2
(1 row)

explain (verbose true, costs false, nodes false) select count(*), sum(xc_having_tab1.val * xc_having_tab2.val), avg(xc_having_tab1.val*xc_having_tab2.val), sum(xc_having_tab1.val*xc_having_tab2.val)::float8/count(*), xc_having_tab1.val2, xc_having_tab2.val2 from xc_having_tab1 full outer join xc_having_tab2 on xc_having_tab1.val2 = xc_having_tab2.val2 group by xc_having_tab1.val2, xc_having_tab2.val2 having xc_having_tab1.val2 + xc_having_tab2.val2 > 2;
                                                                                                                                                                                                                                                    QUERY PLAN                                                                                                                                                                                                                                                    
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Remote Fast Query Execution
   Output: count(*), sum((xc_having_tab1.val * xc_having_tab2.val)), avg((xc_having_tab1.val * xc_having_tab2.val)), ((sum((xc_having_tab1.val * xc_having_tab2.val)))::double precision / (count(*))::double precision), xc_having_tab1.val2, xc_having_tab2.val2
   Remote query: SELECT count(*) AS count, sum((xc_having_tab1.val * xc_having_tab2.val)) AS sum, avg((xc_having_tab1.val * xc_having_tab2.val)) AS avg, ((sum((xc_having_tab1.val * xc_having_tab2.val)))::double precision / (count(*))::double precision), xc_having_tab1.val2, xc_having_tab2.val2 FROM (xc_having_tab1 FULL JOIN xc_having_tab2 ON ((xc_having_tab1.val2 = xc_having_tab2.val2))) GROUP BY xc_having_tab1.val2, xc_having_tab2.val2 HAVING ((xc_having_tab1.val2 + xc_having_tab2.val2) > 2)
   ->  GroupAggregate
         Output: count(*), sum((xc_having_tab1.val * xc_having_tab2.val)), avg((xc_having_tab1.val * xc_having_tab2.val)), ((sum((xc_having_tab1.val * xc_having_tab2.val)))::double precision / (count(*))::double precision), xc_having_tab1.val2, xc_having_tab2.val2
         Group Key: xc_having_tab1.val2, xc_having_tab2.val2
         ->  Merge Join
               Output: xc_having_tab1.val2, xc_having_tab1.val, xc_having_tab2.val2, xc_having_tab2.val
               Merge Cond: (xc_having_tab1.val2 = xc_having_tab2.val2)
               Join Filter: ((xc_having_tab1.val2 + xc_having_tab2.val2) > 2)
               ->  Sort
                     Output: xc_having_tab1.val2, xc_having_tab1.val
                     Sort Key: xc_having_tab1.val2
                     ->  Seq Scan on public.xc_having_tab1
                           Output: xc_having_tab1.val2, xc_having_tab1.val
               ->  Sort
                     Output: xc_having_tab2.val2, xc_having_tab2.val
                     Sort Key: xc_having_tab2.val2
                     ->  Seq Scan on public.xc_having_tab2
                           Output: xc_having_tab2.val2, xc_having_tab2.val
(20 rows)

-- group by and having, without aggregate in the target list
select val2 from xc_having_tab1 group by val2 having sum(val) > 8;
 val2 
------
    3
(1 row)

explain (verbose true, costs false, nodes false) select val2 from xc_having_tab1 group by val2 having sum(val) > 8;
                                     QUERY PLAN                                      
-------------------------------------------------------------------------------------
 Remote Fast Query Execution
   Output: xc_having_tab1.val2
   Remote query: SELECT val2 FROM xc_having_tab1 GROUP BY val2 HAVING (sum(val) > 8)
   ->  GroupAggregate
         Output: val2
         Group Key: xc_having_tab1.val2
         Filter: (sum(xc_having_tab1.val) > 8)
         ->  Sort
               Output: val2, val
               Sort Key: xc_having_tab1.val2
               ->  Seq Scan on public.xc_having_tab1
                     Output: val2, val
(12 rows)

select val + val2 from xc_having_tab1 group by val + val2 having sum(val) > 5;
 ?column? 
----------
        4
        8
        9
(3 rows)

explain (verbose true, costs false, nodes false) select val + val2 from xc_having_tab1 group by val + val2 having sum(val) > 5;
                                             QUERY PLAN                                              
-----------------------------------------------------------------------------------------------------
 Remote Fast Query Execution
   Output: (xc_having_tab1.val + xc_having_tab1.val2)
   Remote query: SELECT (val + val2) FROM xc_having_tab1 GROUP BY (val + val2) HAVING (sum(val) > 5)
   ->  GroupAggregate
         Output: ((val + val2))
         Group Key: ((xc_having_tab1.val + xc_having_tab1.val2))
         Filter: (sum(xc_having_tab1.val) > 5)
         ->  Sort
               Output: ((val + val2)), val
               Sort Key: ((xc_having_tab1.val + xc_having_tab1.val2))
               ->  Seq Scan on public.xc_having_tab1
                     Output: (val + val2), val
(12 rows)

-- group by with aggregates in expression
select count(*) + sum(val) + avg(val), val2 from xc_having_tab1 group by val2 having min(val) < val2;
      ?column?       | val2 
---------------------+------
 17.6666666666666667 |    3
(1 row)

explain (verbose true, costs false, nodes false) select count(*) + sum(val) + avg(val), val2 from xc_having_tab1 group by val2 having min(val) < val2;
                                                              QUERY PLAN                                                               
---------------------------------------------------------------------------------------------------------------------------------------
 Remote Fast Query Execution
   Output: (((count(*) + sum(xc_having_tab1.val)))::numeric + avg(xc_having_tab1.val)), xc_having_tab1.val2
   Remote query: SELECT (((count(*) + sum(val)))::numeric + avg(val)), val2 FROM xc_having_tab1 GROUP BY val2 HAVING (min(val) < val2)
   ->  GroupAggregate
         Output: (((count(*) + sum(val)))::numeric + avg(val)), val2
         Group Key: xc_having_tab1.val2
         Filter: (min(xc_having_tab1.val) < xc_having_tab1.val2)
         ->  Sort
               Output: val2, val
               Sort Key: xc_having_tab1.val2
               ->  Seq Scan on public.xc_having_tab1
                     Output: val2, val
(12 rows)

drop table xc_having_tab1;
drop table xc_having_tab2;
reset enable_hashagg;
reset enable_fast_query_shipping;
ERROR:  unrecognized configuration parameter "enable_fast_query_shipping"
